---
title: "Annotation Preprocessing"
format: html
editor: visual
---

```{r, echo=FALSE, message=FALSE}
rm(list = ls())

library(here)
library(xml2)
library(tidyr)
library(dplyr)
library(purrr)
library(stringr)
library(readxl)
library(IRanges)
```

This code aim to process an XML file to extract annotations from the human reference proteome in UniProt and structure them into a well-organized table. XML files often contain rich metadata, but extracting relevant information requires parsing and transformation into a more readable format. The resulting annotation table will provide a structured view of the extracted data, making it easier to analyze and use in the downstream analysis. Here, I chose to simply save the R object. Furthermore, annotations are used to asses the length of sequences when cropped to a length of maximum 1024 residues while avoiding cropping within an annotation.

## Set up

The XML file and namespace for the file are specified.

```{r}
data_raw_path <- here("data/_raw")
data_complete_path <- here("data/complete")

xml_file <- file.path(data_raw_path, 
                      "UP000005640_9606.xml")  
ns <- c(uniprot = "https://uniprot.org/uniprot")
```

## Process XML file

I will create a function to process the sequence annotations or so called features from an entry in the XML file.

```{r}
processFeatures <- function(entry, ns){
  
  # Extract accession for the current entry.
  accession <- xml_text(xml_find_first(entry, ".//uniprot:accession", ns))
  
  # Extract sequence length from the <sequence> tag.
  sequence <- xml_find_all(entry, ".//uniprot:sequence", ns)
  sequence_length <- as.numeric(xml_attr(sequence[[length(sequence)]], "length"))
  
  # Save the length with accession.
  length <- data.frame(
    accession = accession,
    length = sequence_length
    )
  
  # Extract all feature elements for the current entry.
  features <- xml_find_all(entry, ".//uniprot:feature", ns)

  # Initialize a list to store feature data.
  feature_list <- list()
  
  # Loop through each feature and extract information.
  for (feature in features){
    
    # Get feature type, description and location.
    feature_type <- xml_attr(feature, "type")
    description <- xml_attr(feature, "description")
    location <- xml_find_first(feature, ".//uniprot:location", ns)
    
    # Get position (for the annotation of single amino acids).
    pos <- xml_find_first(location, ".//uniprot:position", ns)
    
    # Define the span of the annotated region.
    if (!is.na(pos)){
      start_pos <- as.numeric(xml_attr(pos, "position"))
      end_pos <- as.numeric(xml_attr(pos, "position"))
    } else {
      start_pos <- xml_find_first(location, ".//uniprot:begin", ns)
      start_pos <- as.numeric(xml_attr(start_pos, "position"))
      end_pos <- xml_find_first(location, ".//uniprot:end", ns)
      end_pos <- as.numeric(xml_attr(end_pos, "position"))
    }
    
    # Store the feature information.
    feature_list <- append(feature_list, list(data.frame(
      accession = accession,
      feature_type = feature_type,
      description = description,
      start_position = start_pos,
      end_position = end_pos,
      stringsAsFactors = FALSE
    )))
  }
  
  return(list(feature_list, length))
}
```

Read the XML file. Note: this will take some time due to the many entries.

```{r}
xml_data <- read_xml(xml_file)
  
# Find all entry elements in the XML file
entries <- xml_find_all(xml_data, ".//uniprot:entry", ns)
  
# Initialize a list to store the results
features <- list()
lengths <- list()

entry_num = 0

for (entry in entries){
  entry_num = entry_num + 1
  results <- processFeatures(entry, ns)
  features <- append(features, results[[1]])
  lengths <- rbind(lengths, results[[2]])
  
  if (entry_num %% 1000 == 0){
    print(paste(entry_num, "entries completed"))
  }
}

# Combine the feature data from all chunks into a single data.table
feature_data <- tibble(do.call(rbind, features))
length_data <- tibble(lengths)
```

Save the results.

```{r}
saveRDS(feature_data, file = file.path(data_complete_path, 
                                       "annotations/interim/anno_initial.rds"))
```

## Filter TrEMBL sequences

We are only interested in the SWISS-PROT entries as these are manually annotated unlike TrEMBL sequences. The accessions belonging to the database are stored in txt file loaded below.

```{r}
accessions_sp <- read.table(file = file.path(data_complete_path,
                                             "additional/accessions_sp.txt")) |>
  dplyr::rename(accession = V1)
```

I will filter out annotations belonging to TrEMBL sequences for both the feature and length data generated above.

```{r}
feature_data <- feature_data |>
  filter(accession %in% accessions_sp$accession)

length_data <- length_data |>
  filter(accession %in% accessions_sp$accession)
```

I do a sanity check to see if all SWISS-PROT accessions appear in the feature table.

```{r}
print(paste("Unique accessions in feature table found in accession list:", 
            sum(unique(feature_data$accession) %in% accessions_sp$accession)))
```

The intermediate results are saved.

```{r}
saveRDS(feature_data, file = file.path(data_complete_path, 
                                       "annotations/interim/anno_filter1.rds"))
```

## Filter annotation types

I am not interested in all annotation types from UniProt. Thus, I read in a file describing whether to keep an annotation or not.

```{r}
annotation_types <- read_excel(path = here("other/anno_keep_list.xlsx"), 
                               sheet = "R")
```

The tibbles are joined by feature type.

```{r}
feature_data <- left_join(feature_data, 
                          annotation_types, 
                          by = "feature_type")
```

The annotations are filtered based on the keep column.

```{r}
feature_data <- feature_data |>
  filter(keep == 1) |>
  select(!keep) |>
  relocate(category,
           .after = accession)
```

The intermediate results are saved.

```{r}
saveRDS(feature_data, file = file.path(data_complete_path, 
                                       "annotations/interim/anno_filter2.rds"))
```

## Filter annotations with missing start or end position

I remove annotations without start and end positions.

```{r}
feature_data <- feature_data |>
  filter(!is.na(start_position),
         !is.na(end_position))

saveRDS(feature_data, file = file.path(data_complete_path, 
                                       "annotations/interim/anno_filter3.rds"))
```

## Filter annotations beyond position 1024

The ESM-2 model will only consider proteins of 1024 residues or less. Let's get the percentage of sequences longer than 1024 residues.

```{r}
n <- sum(length_data$length > 1024)

print(paste("Percentage of sequences larger than 1024:", round(n/length((length_data$length))*100, digits = 2)))
```

For the long sequences, I will crop them and only consider the first 1024 positions. However, I wish to avoid cropping a sequence in the middle of an annotation. To do so, I will construct reduced intervals by merging the overlapping regions. If position 1024 is found to be in the middle of an interval, the edge will be define as the position prior to the start of the interval.

```{r}
length_adjusted <- feature_data |>
  group_by(accession) |>
  summarise(ranges = list(reduce(IRanges(start = start_position,
                                         end = end_position),
                                 min.gapwidth = 0)),
            .groups = "drop") |>
  mutate(ranges = lapply(ranges, 
                         function(r) {tibble(start = start(r), 
                                             end = end(r))})) |>
  unnest(ranges) |>
  filter(start <= 1024, end > 1024) |>
  mutate(length_adj = start - 1) |>
  select(accession, length_adj)
```

I join the adjusted length with the filtered annotations. We will overwrite the previous results to add this information.

```{r}
feature_data <- left_join(feature_data,
                          length_data,
                          by = "accession") |>
  left_join(length_adjusted,
            by = "accession") |>
  mutate(length_adj = case_when(is.na(length_adj) ~ length,
                                .default = length_adj),
         length_adj = case_when(length_adj > 1024 ~ 1024,
                                .default = length_adj))

saveRDS(feature_data, file = file.path(data_complete_path, 
                                       "annotations/interim/anno_filter3.rds"))
```

Finally, I remove the annotations that will not appear in the cropped sequence.

```{r}
feature_data <- feature_data |>
  mutate(keep = case_when(start_position <= length_adj ~ "Yes",
                          start_position > length_adj ~ "No")) |>
  filter(keep == "Yes") |>
  select(!keep)
```

I save the final results.

```{r}
saveRDS(feature_data, file = file.path(data_complete_path, 
                                       "annotations/processed/anno.rds"))
```

To adjust the sequence length, I will save the length data in a CSV file.

```{r}
write.csv(length_adjusted, file = file.path(data_complete_path,
                                            "additional/seq_lengths_adj.csv"),
                                            row.names = FALSE)
```

## Expanded annotations

I will also save an expanded version of the annotation table. This will describe the position-wise annotation.

```{r}
feature_data_expand <- feature_data |>
  distinct(accession, start_position, end_position, category, feature_type) |>
  mutate(position = map2(start_position, end_position, seq)) |>
  unnest(position) |>
  select(accession, position, category, feature_type) 

saveRDS(feature_data_expand, file = file.path(data_complete_path,
                                              "annotations/processed/anno_expanded.rds"))
```
