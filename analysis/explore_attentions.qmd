---
title: "Exploratory Attention Analysis"
format: html
editor: visual
---

```{r, echo=FALSE, message=FALSE}
rm(list = ls())

library(here)
library(tidyr)
library(dplyr)
library(purrr)
library(stringr)
library(IRanges)
library(patchwork)

source("utils/smoothing.R")
source("utils/theme.R")
```

In this script, I will explore the behavior of the attention scores from the ESM-2 model on a smaller subset.

## Set up

I ran the ESM-2 model for 100 sequences and extracted the raw attention scores for each self-attention layer. I extract the raw attention scores, because we would otherwise force unannotated positions to have the same degree of signal as the annotated positions when applying the softmax. The heads within each layer was summarized either by taken the average across heads or computing the 90% quantile across heads. To compare the biological signal with a baseline, I also ran the model for 5 scramble sequences per biological sequence. The attention scores have been aggregated into vectors by taken the col mean or 90% quantile to obtain an attention score per position. For the scrambled sequences, I summarize the results by computing the mean, standard deviation, minimum and maximum attention per position across the 5 sequences. Let's read in the data as well as the annotations.

```{r}
res_path <- here("reports/figures/explore_attention/")

anno <- readRDS(file = file.path(here("data/complete/annotations/processed/anno.rds")))

# Expand annotations
anno_expanded <- anno |>
  rowwise() |>
  mutate(position = list(seq(start_position, end_position))) |>
  unnest(position) |>
  select(accession, position, category, feature_type)

# A helper function to load and process a single file
process_attn_file <- function(path, head_type, col_type) {
  readRDS(path) %>%
    mutate(head_type = head_type,
           col_type = col_type) |>
    select(accession, layer, position, bio_attn, bio_attn_Z, head_type, col_type) |>
    left_join(anno_expanded,
            by = c("accession", "position"),
            relationship = "many-to-many") |>
    mutate(across(c(category, feature_type), ~ ifelse(is.na(.), "unannotated", .)))
}

# Define all files and their metadata
files_info <- tribble(
  ~path, ~head_type, ~col_type,
  here("data/subset_00100/esm_processed/attention/attn_raw_headMean_colMean.rds"), "mean",   "mean",
  here("data/subset_00100/esm_processed/attention/attn_raw_headMean_colQuan90.rds"), "mean", "quan90",
  here("data/subset_00100/esm_processed/attention/attn_raw_headQuan90_colMean.rds"), "quan90",   "mean",
  here("data/subset_00100/esm_processed/attention/attn_raw_headQuan90_colQuan90.rds"), "quan90", "quan90",
)

# Process and combine all into one data frame
all_attn_rep <- pmap_dfr(files_info, process_attn_file)
```

For now, we do not consider the annotation type. We will just distinguish between annotated vs. unannotated positions.

```{r}
all_attn <- all_attn_rep |>
  mutate(annotated = case_when(feature_type == "unannotated" ~ "No",
                               .default = "Yes")) |>
  distinct()
```

## Distribution of the Attention Scores

We look at the distribution of the attention for unannotated and annotated positions for the different methods for summarizing the attention signal.

```{r}
all_attn  |>
  ggplot(mapping = aes(y = bio_attn,
                       x = annotated,
                       color = annotated)) +
  geom_violin(mapping = aes(fill = annotated),
              alpha = 0.6) +
  geom_boxplot(width = 0.2,
               outlier.size = 0.5,
               outlier.alpha = 0.4) +
  scale_color_manual(values = c("#1f618d", "#990000")) +
  scale_fill_manual(values = c("#1f618d", "#990000")) +
  labs(x = "Annotated Position",
       y = "Attention Score") +
  guides(color = "none",
         fill = "none") +
  facet_grid(rows = vars(col_type),
             cols = vars(head_type),
             scales = "free",
             labeller = labeller(head_type = c("mean" = "Heads - Mean", "quan90" = "Heads - Q90"),
                                 col_type = c("mean" = "Columns - Mean", "quan90" = "Columns - Q90"))) +
  main_theme + 
  theme(strip.background = element_rect(fill="#cccccc", 
                                        color = "#cccccc"),
        strip.text=element_text(color="black", 
                                face = "bold",
                                size = 11),
        axis.ticks.x = element_blank(),
        plot.margin = margin(20, 20, 20, 20), # t, r, b, l 
        panel.spacing = unit(0.4, "lines"),
        panel.border = element_rect(color = "black", fill = NA, size = 0.8),
        panel.background = element_rect(fill = "white", color = NA))

ggsave(filename = file.path(res_path, "dist_bio_attn.png"), width = 5, height = 5, dpi = 300)
```

It is difficult to see a clear difference between the distributions. The table also contains a Z-score for the attention signal (bio_attn_Z). The Z-score is a normalized biological signal calculated per position by subtracting the mean of the attention across the 5 scrambled sequences divided by the standard deviation.

$$Z = \frac{A_{bio}-A_{\mu_{scr}}}{A_{\sigma_{scr}}}$$

The purpose of this normalization is to center the signal around 0. Let's see if this we can recover the biological signal by normalizing the attention scores from the scrambled sequences.

```{r}
all_attn  |>
  ggplot(mapping = aes(y = bio_attn_Z,
                       x = annotated,
                       color = annotated)) +
  geom_violin(mapping = aes(fill = annotated),
              alpha = 0.4) +
  geom_boxplot(width = 0.2,
               outlier.size = 0.5,
               outlier.alpha = 0.6) +
  scale_color_manual(values = c("#1f618d", "#990000")) +
  scale_fill_manual(values = c("#1f618d", "#990000")) +
  labs(x = "Annotated Position",
       y = "Attention Score") +
  guides(color = "none",
         fill = "none") +
  facet_grid(rows = vars(col_type),
             cols = vars(head_type),
             scales = "free",
             labeller = labeller(head_type = c("mean" = "Heads - Mean", "quan90" = "Heads - Q90"),
                                 col_type = c("mean" = "Columns - Mean", "quan90" = "Columns - Q90"))) +
  main_theme + 
  theme(strip.background = element_rect(fill="#cccccc", 
                                        color = "#cccccc"),
        strip.text=element_text(color="black", 
                                face = "bold",
                                size = 11),
        axis.ticks.x = element_blank(),
        plot.margin = margin(20, 40, 20, 40), # t, r, b, l 
        panel.spacing = unit(0.4, "lines"),
        panel.border = element_rect(color = "black", fill = NA, size = 0.8),
        panel.background = element_rect(fill = "white", color = NA))

ggsave(filename = file.path(res_path, "dist_bio_attn_Z.png"), width = 7, height = 5, dpi = 300)
```

In the above, we have just pooled the attention across layers. Let's look at the distribution of the attention across layers.

```{r}
plotDistAttentionLayers <- function(type){
  all_attn  |>
    filter(head_type == type) |>
    mutate(layer = factor(layer)) |>
    ggplot(mapping = aes(y = bio_attn,
                         x = layer)) +
    geom_boxplot(color = "#1f618d",
                 fill = "#1f618d",
                 alpha = 0.6,
                 width = 0.6,
                 outlier.size = 0.5,
                 outlier.alpha = 0.6) +
    labs(x = "Layer",
         y = "Attention Score") +
    facet_grid(rows = vars(col_type),
               cols = vars(head_type),
               scales = "free",
               labeller = labeller(head_type = c("mean" = "Heads - Mean", "quan90" = "Heads - Q90"),
                                   col_type = c("mean" = "Columns - Mean", "quan90" = "Columns - Q90"))) + 
    main_theme +
    theme(strip.background = element_rect(fill="#cccccc", 
                                          color = "#cccccc"),
          strip.text=element_text(color="black", 
                                  face = "bold",
                                  size = 11),
          plot.margin = margin(20, 40, 20, 40), # t, r, b, l 
          panel.spacing = unit(0.4, "lines"),
          panel.border = element_rect(color = "black", fill = NA, size = 0.8),
          panel.background = element_rect(fill = "white", color = NA))
}

plotDistAttentionLayers("mean")
ggsave(filename = file.path(res_path, "dist_bio_attn_layers_head_means.png"), width = 7, height = 6, dpi = 300)
```

We generate the plot for the attention signal based on the 90% quantile of the heads.

```{r}
plotDistAttentionLayers("quan90")
ggsave(filename = file.path(res_path, "dist_bio_attn_layers_head_quan.png"), width = 7, height = 6, dpi = 300)
```

Let's see how it looks like for one aggregation method while distinguishing between annotated and unannotated positions.

```{r}
all_attn  |>
  filter(head_type == "quan90",
          col_type == "quan90") |>
  mutate(layer = factor(layer)) |>
  ggplot(mapping = aes(y = bio_attn,
                       x = layer,
                       color = annotated,
                       fill = annotated)) +
  geom_boxplot(alpha = 0.6,
               width = 0.6,
               outlier.size = 0.5,
               outlier.alpha = 0.6) +
  labs(x = "Layer",
       y = "Attention Score",
       color = "Annotated",
       fill = "Annotated") + 
  scale_color_manual(values = c("#1f618d", "#990000")) +
  scale_fill_manual(values = c("#1f618d", "#990000")) +
  main_theme +
  theme(strip.background = element_rect(fill="#cccccc", 
                                        color = "#cccccc"),
        strip.text=element_text(color="black", 
                                face = "bold",
                                size = 11),
        plot.margin = margin(20, 20, 20, 20), # t, r, b, l 
        panel.spacing = unit(0.4, "lines"),
        panel.border = element_rect(color = "black", fill = NA, size = 0.8),
        panel.background = element_rect(fill = "white", color = NA))

ggsave(filename = file.path(res_path, "dist_bio_attn_layers_head_quan_col_quan.png"), width = 9, height = 3, dpi = 300)
```

## Distribution of the Attention within the sequence

I look at the attention scores in relation to the position within the sequence.

```{r}
all_attn  |>
  filter(head_type == "mean",
          col_type == "mean") |>
  filter(layer == 11) |>
  group_by(accession) |>
  mutate(length = max(position),
         pos_percent = position/length) |>
  ggplot(mapping = aes(x = pos_percent,
                       y = bio_attn)) +
  geom_bin2d(bins = 120) + 
  labs(x = "Relative Position (Position / Seq. Length)",
       y = "Attention Score",
       fill = "Count") + 
  scale_fill_gradient(high = "#1f618d", low = "#e0e7ef") + 
  scale_x_continuous(limits = c(0, 1), 
                     expand = c(0, 0),
                     labels = function(x) round(x, 2)) + 
  main_theme + 
  theme(plot.margin = margin(20, 20, 20, 20),
        panel.border = element_rect(color = "black", fill = NA, size = 0.8)) 

ggsave(filename = file.path(res_path, "dist_bio_attn_pos.png"), width = 6, height = 4, dpi = 300)
```

## Visualize examples

To get an idea about what is going on, I define a function to plot the attention signal with features for a given sequences.

```{r}
plotExample <- function(data_attn, data_feature, acc){
  
  # Define region intervals.
  region <- data_feature |>
    filter(accession == acc) |>
    mutate(feature_type = str_c(
    str_to_upper(str_sub(feature_type, 1, 1)),
    str_to_lower(str_sub(feature_type, 2))))
  
  # Extract single sites from regions.
  site <- region |>
    filter(start_position == end_position)
  
  # Exclude sites from regions.
  region <- region |>
    filter(start_position != end_position) |>
    mutate(y_position = as.integer(factor(feature_type))) 
  
  # Define y position for site.
  site <- site |>
    mutate(y_position = max(region$y_position) + 1) 
  
  # Get the attention signal and apply smoothing.
  attn <- data_attn |>
    filter(accession == acc) |>
    group_by(accession, layer) |>
    mutate(bio_attn_Z_smooted = smoothAttention(bio_attn_Z, 
                                                window = 11, 
                                                sigma = 1)) |>
    ungroup() |>
    mutate(layer_group = case_when(layer < 12 ~ "Layer 1:11",
                                   layer > 22 ~ "Layer 23:33",
                                   .default = "Layer 12:22"))
  
  # Define the length of the sequence.
  seq_length <- max(attn$position)
  
  # Make background line.
  background_line <- tibble(start_position = 1,
                            end_position = seq_length,
                            y_position = c(unique(region$y_position),
                                           unique(site$y_position)))
  
  # Plot the features.
  p_features <- ggplot(region,
                       mapping = aes(x = start_position)) +
    geom_rect(background_line,
              mapping = aes(xmin = start_position,
                            xmax = end_position,
                            ymin = y_position - 0.05,
                            ymax = y_position + 0.05),
              color = "#E6E6E6") + 
    geom_rect(mapping = aes(xmin = start_position, 
                            xmax = end_position, 
                            ymin = y_position - 0.4, 
                            ymax = y_position + 0.4, 
                            fill = feature_type),
              alpha = 1, 
              color = "black") +
    geom_point(site,
               mapping = aes(x = start_position,
                             y = y_position),
               shape = 19,
               size = 3,
               color = "black") + 
    geom_point(site,
               mapping = aes(x = start_position,
                             y = y_position,
                             color = feature_type),
               shape = 20,
               size = 3) +
    scale_x_continuous(breaks = c(1, seq(50, seq_length-30, by = 50), seq_length),
                       limits = c(1, seq_length),
                       expand = expansion(mult = c(0.04, 0.04))) +
    scale_y_continuous(breaks = unique(region$y_position), 
                       labels = unique(region$feature_type)) +
    labs(x = "Position", 
         y = "", 
         color = "Site Type",
         fill = "Region Type") +
    theme_bw() +
    theme(legend.position = "bottom",
          axis.text.y = element_blank(), 
          axis.ticks.y = element_blank(),    
          axis.title.x = element_text(face = "bold", vjust = -1),
          axis.title.y = element_text(face = "bold", vjust = 3),
          legend.title = element_text(face = "bold", size = 11),
          legend.text = element_text(size = 11),
          plot.margin = margin(0, 20, 20, 20),
          legend.margin = margin(t = 20, r = 0, b = 0, l = 0)) +
    guides(fill = guide_legend(ncol = 1,
                               title.position = "top"),
           color = guide_legend(ncol = 1,
                                title.position = "top"))
  
  # Add attention.
  p_attn <- ggplot(data = attn,
                   mapping = aes(x = position,
                                 y = bio_attn_Z_smooted,
                                 group = layer)) +
    geom_path(color = "#1f618d") + 
    geom_hline(yintercept = 0,
               color = "#990000") +
    scale_x_continuous(breaks = c(1, seq(50, seq_length-30, by = 50), seq_length),
                       limits = c(1, seq_length),
                       expand = expansion(mult = c(0.04, 0.04))) + 
    facet_grid(rows = vars(layer_group), scales = "free") +
    labs(x = "", 
         y = "Attention Score",
         color = "Layer",
         title = acc) +
    theme_bw() +
    theme(strip.background = element_rect(fill ="#cccccc", 
                                          color = "#cccccc"),
          strip.text=element_text(color="black", 
                                  face = "bold",
                                  size = 11),
          axis.title.x = element_text(face = "bold", vjust = -1),
          axis.title.y = element_text(face = "bold", vjust = 3),
          legend.title = element_text(face = "bold", size = 11),
          legend.text = element_text(size = 11),
          plot.margin = margin(20, 20, 0, 20))
  
  p_attn / p_features + plot_layout(heights = c(2, 1))
  
}
```

We choose the relevant data.

```{r}
attn <- readRDS(files_info$path[1]) 
accessions <- unique(attn$accession)
```

We sample an example.

```{r}
#ex <- sample(accessions, size = 1)
#print(ex)

ex1 <- "P40198"
```

Let's visualize this sequence.

```{r}
plotExample(attn, anno, ex1) + 
  scale_color_manual(values = c("#990000")) + 
  scale_fill_manual(values = c("#117864", "#f39c12", "#7d3c98", "#2980b9", "#d35400", "#5d6d7e"))
ggsave(filename = file.path(res_path, paste("example_", ex1, ".png", sep = "")), width = 8, height = 7, dpi = 300)
```

```{r}
ex2 <- "Q8TDD2"

plotExample(attn, anno, accessions[30]) + 
  scale_color_manual(values = c("#990000", "#1f618d")) + 
  scale_fill_manual(values = c("#117864", "#f39c12", "#7d3c98", "#2980b9", "#d35400", "#5d6d7e"))
ggsave(filename = file.path(res_path, paste("example_", ex2, ".png", sep = "")), width = 8, height = 8, dpi = 300)
```

## Attention Across Layers and Annotation Types

We want to look at the attention for each feature type across the different layers. I load the annotations also denoted as features. In general, the attention signal is highly noisy. Thus, we must apply smoothing to be able to make sense of it. To summarize the attention, I average the attention weights for each position within a given feature type across layers.

```{r}
plotCapPos <- function(attn, threshold){
  p_cap_pos <- attn |>
    mutate(feature_type = factor(feature_type),
           category = factor(category),
           feature_type = str_c(str_to_upper(str_sub(feature_type, 1, 1)),
                                str_to_lower(str_sub(feature_type, 2))),
           category = str_c(str_to_upper(str_sub(category, 1, 1)),
                            str_to_lower(str_sub(category, 2))),
           category = case_when(category == "Amino acid modification" ~ "AAM",
                                category == "Molecule processing" ~ "MP",
                                category == "Unannotated" ~ "U",
                                .default = category)) |>
    arrange(accession, position) |>
    group_by(accession, layer) |>
    mutate(bio_attn_Z_smooted = smoothAttention(bio_attn_Z,
                                                window = 11,
                                                sigma = 1)) |>
    ungroup() |>
    mutate(high = case_when(bio_attn_Z_smooted > threshold ~ 1,
                            .default = 0)) |>
    group_by(layer, category, feature_type) |>
    summarise(detected = sum(high),
              total = n()) |>
    ungroup() |>
    mutate(proportion = detected/total) |>
    ggplot(mapping = aes(x = layer,
                         y = feature_type,
                         fill = proportion)) +
    geom_tile(color = "black") +
    scale_fill_gradient2(low = "#1f618d", mid = "white", high = "#990000", midpoint = 0.5) + 
    scale_x_continuous(breaks = seq(1, 33, by = 2),
                       expand = c(0, 0)) +
    scale_y_discrete(expand = c(0, 0)) +
    labs(x = "Layer",
         y = "Annotation Type",
         fill = "Proportion") +
    facet_grid(rows = vars(category),
               scales = "free_y",
               space = "free_y") + 
    main_theme + 
    theme(legend.position = "bottom",
          legend.title.align = 0.5,
          strip.background = element_rect(fill ="#cccccc", 
                                          color = "#cccccc"),
          strip.text=element_text(color="black", 
                                  face = "bold",
                                  size = 11),
          panel.border = element_rect(color = "black", fill = NA, size = 0.8),
          plot.margin = margin(20, 20, 20, 20)) +
    guides(fill = guide_colorbar(title.position = "bottom", barwidth = 10, barheight = 0.5))
  
  p_cap_freq <- attn |>
    filter(layer == 1) |>
    arrange(category, feature_type) |>
    mutate(feature_type = factor(feature_type,
                                 levels = unique(feature_type))) |>
    group_by(category, feature_type) |>
    summarise(total = n(),
              seq = length(unique(accession))) |>
    ggplot(mapping = aes(x = total,
                         y = feature_type)) +
    geom_bar(stat = "identity",
             fill = "black") +
    geom_text(mapping = aes(label = total),
              hjust = -0.15,
              size = 2.5) +
    geom_text(mapping = aes(x = -2000,
                            label = paste0("(", seq, ")")),
              color = "#990000",
              size = 2.5) +
    scale_x_continuous(limits = c(-2000, 25000)) +
    scale_y_discrete(expand = c(0, 0)) + 
    facet_grid(rows = vars(category),
               scales = "free_y",
               space = "free_y") + 
    labs(x = "Total Position Count") + 
    theme_void() + 
    theme(strip.text = element_blank(),
          axis.title.x = element_text(face = "bold", vjust = -1),
          plot.margin = margin(20, 20, 20, 20)) 
  
  p_combined <- p_cap_pos + p_cap_freq
  
  return(p_combined)
}
```

```{r}
for (i in c("mean", "quan90")){
  for (j in c("mean", "quan90")){
    for (k in c(2, 3)){
      plot <- all_attn_rep  |>
        filter(head_type == i,
               col_type == j) |>
        plotCapPos(threshold = k) 
      
      ggsave(filename = file.path(res_path, paste("cap_pos_head_", i, "_col_", j, "_t", k, ".png", sep = "")),
             width = 10, 
             height = 6,
             dpi = 300)
    }
  }
}
```

```{r}
partition <- read_csv("data/subset_00100/additional/partition.csv")

all_attn_rep |>
  filter(head_type == "mean",
         col_type == "mean",
         layer == 1) |>
  left_join(partition,
            by = "accession") |>
  group_by(partition, feature_type) |>
  count() |>
  arrange(feature_type)
```








```{r}
all_attn_rep
```






